import axios from "axios";
import { BASE_URL } from "@/constant/environment";
import { localToken, localUser } from "./token";
import { message } from "antd";
import { PATHS } from "@/constant/path";
const axiosInstance = axios.create({
  baseURL: BASE_URL,
  withCredentials: true
});

axiosInstance.interceptors.request.use(
  // config request before sent to sever
  (config) => {
    config.headers.Authorization = `Bearer ${localToken.get()}`;
    //console.log("config", config);
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// Interceptor cho ph√©p can thi·ªáp v√†o qu√° tr√¨nh nh·∫≠n ph·∫£n h·ªìi (RESPONSE) t·ª´ server.
axiosInstance.interceptors.response.use(
  (response) => {

    console.log('üöÄresponse---->', response);
    return response;
  },
  async (error) => {
    const originalRequest = error.config;
    // N·∫øu m√£ l·ªói 403 ho·∫∑c 401 v√† request kh√¥ng ch·ª©a key _retry
    if ((error.response?.status === 403 || error.response?.status === 401) && !originalRequest._retry) {
      originalRequest._retry = true;
      try {
        // G·ªçi API ƒë·ªÉ c·∫≠p nh·∫≠t token m·ªõi
        const res = await axiosInstance.get("/refreshToken");
        if (res?.data?.EC === 0) {
          let newToken = res.data.DT;
          localToken.set(newToken);
          // Thay ƒë·ªïi token trong header c·ªßa y√™u c·∫ßu ban ƒë·∫ßu
          originalRequest.headers.Authorization = `Bearer ${newToken}`;
          // G·ªçi l·∫°i y√™u c·∫ßu ban ƒë·∫ßu v·ªõi token m·ªõi
          return axiosInstance(originalRequest);
        }
        else {
          localToken.remove();
          localUser.remove();
          window.location.href = PATHS.HOME.LOGIN;
          message.error(res?.data?.EM || "C√≥ l·ªói x·∫£y ra");
        }
      } catch (error) {
        localToken.remove();
        localUser.remove();
        window.location.href = PATHS.HOME.LOGIN;
        message.error("C√≥ l·ªói x·∫£y ra");
      }
    } else if (error.response?.status === 400) {
      message.error(error.response?.data?.EM || "C√≥ l·ªói x·∫£y ra");
    } else {
      console.log("error", error);
      // N·∫øu l·ªói kh√¥ng ph·∫£i 403 ho·∫∑c 401, tr·∫£ v·ªÅ l·ªói ban ƒë·∫ßu
      return Promise.reject(error);
    }

  }
);
export default axiosInstance;
